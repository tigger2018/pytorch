name: mac-test

on:
  workflow_call:
    inputs:
      build-environment:
        required: true
        type: string
        description: Top-level label for what's being built/tested.
      test-matrix:
        required: true
        type: string
        description: JSON description of what test configs to run.

    secrets:
      AWS_OSSCI_METRICS_V2_ACCESS_KEY_ID:
        required: true
        description: access key id for test stats upload
      AWS_OSSCI_METRICS_V2_SECRET_ACCESS_KEY:
        required: true
        description: secret acess key for test stats upload

env:
  IN_CI: 1 # TODO delete in favor of GITHUB_ACTIONS
  IS_GHA: 1 # TODO delete in favor of GITHUB_ACTIONS

# For setup-miniconda, see https://github.com/conda-incubator/setup-miniconda/issues/179
defaults:
  run:
    shell: bash -e -l {0}

jobs:
  test:
    # Don't run on forked repos.
    if: github.repository_owner == 'pytorch'
    strategy:
      matrix: ${{ fromJSON(inputs.test-matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 240
    env:
      BUILD_ENVIRONMENT: ${{ inputs.build-environment }}
      COMPACT_JOB_NAME: ${{ inputs.build-environment }}
      JOB_BASE_NAME: ${{ inputs.build-environment }}-test
      TEST_CONFIG: ${{ matrix.config }}
      SHARD_NUMBER: ${{ matrix.shard }}
      NUM_TEST_SHARDS: ${{ matrix.num_shards }}
      PR_BODY: ${{ github.event.pull_request.body }}
      PYTORCH_RETRY_TEST_CASES: 1
    steps:
      - name: Clean workspace
        shell: bash
        run: |
          echo "${GITHUB_WORKSPACE}"
          rm -rf "${GITHUB_WORKSPACE}"
          mkdir "${GITHUB_WORKSPACE}"

      - name: Checkout PyTorch
        uses: zhouzhuojie/checkout@05b13c9a0d21f08f6d5e64a1d5042246d13619d9
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
          # deep clone, to allow use of git merge-base
          fetch-depth: 0
          submodules: recursive

      - name: Download PyTorch Build Artifacts from GHA
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.BUILD_ENVIRONMENT }}
          path: .

      - name: Unzip artifacts
        run: |
          unzip -o artifacts.zip

      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: 3.8
          activate-environment: build

      - name: Install macOS homebrew dependencies
        run: |
          # Install dependencies
          brew install libomp

      - name: Parse ref
        id: parse-ref
        run: .github/scripts/parse_ref.py

      - name: Test
        run: |
          python3 -mpip install dist/*.whl
          .jenkins/pytorch/macos-test.sh

      - name: Zip JSONs for upload
        if: always()
        env:
          FILE_SUFFIX: ${{ github.job }}-${{ matrix.config }}-{{ matrix.shard }}-{{ matrix.num_shards }}-{{ matrix.runner }}
        run: |
          # Remove any previous test jsons if they exist
          rm -f test-jsons-*.zip
          zip -r "test-jsons-${FILE_SUFFIX}.zip" test -i '*.json'

      - name: Store Test Downloaded JSONs on Github
        uses: actions/upload-artifact@v2
        if: always()
        with:
          retention-days: 14
          if-no-files-found: warn
          path: test-jsons-*.zip

      - name: Zip test reports for upload
        if: always()
        env:
          FILE_SUFFIX: ${{ github.job }}-${{ matrix.config }}-{{ matrix.shard }}-{{ matrix.num_shards }}-{{ matrix.runner }}
        run: |
          # Remove any previous test reports if they exist
          rm -f test-reports-*.zip
          zip -r "test-reports-${FILE_SUFFIX}.zip" test -i '*.xml'

      - name: Store Test Reports on Github
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test-reports
          retention-days: 14
          if-no-files-found: error
          path: test-reports-*.zip

      - name: Upload test statistics
        if: always()
        env:
          AWS_DEFAULT_REGION: us-east-1
          BRANCH: ${{ steps.parse-ref.outputs.branch }}
          JOB_BASE_NAME: ${{ inputs.build-environment }}-test
          PR_NUMBER: ${{ github.event.pull_request.number }}
          SHA1: ${{ github.event.pull_request.head.sha || github.sha }}
          TAG: ${{ steps.parse-ref.outputs.tag }}
          WORKFLOW_ID: ${{ github.run_id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_OSSCI_METRICS_V2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_OSSCI_METRICS_V2_SECRET_ACCESS_KEY }}
        shell: bash
        run: |
          set -x
          python3 -m pip install -r requirements.txt
          python3 -m pip install boto3==1.19.12
          GHA_WORKFLOW_JOB_ID=$(python3 .github/scripts/get_workflow_job_id.py "${GITHUB_RUN_ID}" "${RUNNER_NAME}")
          export GHA_WORKFLOW_JOB_ID
          python3 -m tools.stats.print_test_stats --upload-to-s3 --compare-with-s3 test
